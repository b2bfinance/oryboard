// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {
	Code    float32 `json:"code"`
	Message string  `json:"message"`
}

// GetStatisticsResponse defines model for GetStatisticsResponse.
type GetStatisticsResponse struct {
	CountHydraClients float32 `json:"count_hydra_clients"`
	CountIdentities   float32 `json:"count_identities"`
}

// Identity defines model for Identity.
type Identity struct {
	AccountId string `json:"account_id"`
}

// ListIdentitiesResponse defines model for ListIdentitiesResponse.
type ListIdentitiesResponse struct {
	Items []Identity `json:"items"`
}

// ListOAuthClientsResponse defines model for ListOAuthClientsResponse.
type ListOAuthClientsResponse struct {
	ClientId string `json:"client_id"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /identities)
	ListIdentities(ctx echo.Context) error

	// (GET /oauth/clients)
	ListOAuthClients(ctx echo.Context) error

	// (GET /stats)
	GetStatistics(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListIdentities converts echo context to params.
func (w *ServerInterfaceWrapper) ListIdentities(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListIdentities(ctx)
	return err
}

// ListOAuthClients converts echo context to params.
func (w *ServerInterfaceWrapper) ListOAuthClients(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListOAuthClients(ctx)
	return err
}

// GetStatistics converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatistics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatistics(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/identities", wrapper.ListIdentities)
	router.GET(baseURL+"/oauth/clients", wrapper.ListOAuthClients)
	router.GET(baseURL+"/stats", wrapper.GetStatistics)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xUT2vcPhD9KmF+v6NZbdubbqGUsFBIaY8hBK08u1awJXU0LphF371IinfXa2/TQxNf",
	"JOQ3M2/e/DmAdp13Fi0HkAcIusFO5esXIkfp4sl5JDaYn7WrMZ08eAQJtu+2SBAr6DAEtT//F5iM3UOM",
	"FRD+7A1hDfKheDjhH6sR77bPqDn5ukP+wYpNYKPDdwze2YBLXHrLT81Qk3rSrRmTmFErOFOjZTPaXoBm",
	"HC8sqsVgS9w3xWiY01V6dPu6SGfYpSBfTeDNkd11hQxjN738T7gDCf+JU+HFS9XFkXo8hlREapixK96u",
	"Ebu/7bn5XCT6Q/Ey4K/EOEHnIRPW2J1LXmoMmoxn4yxIuKdh6xTVN7ffNlABG25x/vwLKRT8h9V6tU45",
	"OI9WeQMSPuWnCrziJpMW0ybaI6cjpaVS1E0N8qI2kFIpGmSTj+t1aV3LaLO18r41OtuL55CojHP4Wr2u",
	"dEHMotS4U33L/yxY2QexfBUIp3puxNnYXRXjvB/eWo7F3nsfQQKriRDTbrxDvgnHnbaC6kKoycp7S5WW",
	"d+s7SBQrCEhp3kA+HKCnFiQ0zD5IIdzLVK6MZSSrWoiP8XcAAAD//zmu5syeBgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
